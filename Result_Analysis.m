% AUTHOR INFORMATION AND SCRIPT OVERVIEW, V1.0, 12/2020
%{
Author:________________________________________Fabio Vulpi (Github: Ph0bi0) 

                                 PhD student at Polytechnic of Bari (Italy)
                     Researcher at National Research Council of Italy (CNR)

This script performs result analysis of the models trained and tested in
the script MAIN 
%}
%-------------------------------------------------------------------------%

clear all, close all, clc
% Determine where your m-file's folder is.
folder = fileparts(which(mfilename)); 
% Add that folder plus all subfolders to the path.
addpath(genpath(folder));

% automatically attaches to your working directory
ResultDir = strcat(folder,'/results/');

% CHOOSE RESULT
%{
The user can choose the results to analyse setting "ResultName" among the
files stored in the directory "./results".
Results will be automatically loaded in the workspace as a struct "RES"
previously generated running the MAIN script.
The first picture the user will see sums up the available channels
highlighting the active ones to which the following results correspond.
This plot is generated by the function "ChannelsPlot", that the user can
find in the directory "./functions/results analysis functions".
%}

ResultName = 'TrainingResults_1';
load(strcat(ResultDir,ResultName,'.mat'))
ChannelsPlot(RES)

%% PERFORMANCE METRICS LINE PLOTS
%{
The following function returns 4 figures containing the analysis of the
four performance metrics:
    - Accuracy 
    - Sensitivity
    - Precision
    - F1 score
The script loads the results of the training generated in the MAIN script
and automatically passes the workspace saved struct "RES" to the function
"PerformanceMetrics_LinePlot".
The function "PerformanceMetrics_LinePlot" closes all open figures and
generates the 4 figures for performance metrics across all the tested
sampling windows. 
The function "PerformanceMetrics_LinePlot" is stored in the directory
"./functions/results analysis functions" and has a function overvirew that
the user can read to understand the plot process.

The user can easily modify ceratain aspects of the plots by changing
numbers in the following fields of the struct "PMLprop":
    - MarkerSize, the size of the markers used for distinguish models
    - LineWidth, the width of lines in the plot
    - MinPerc, the minimum percentage to show on every plot
    - PercRes1, the principal percentage resolution to highlight with a
    solid black line 
    - PercRes2, the secondary percentage resolution to highlight with a
    dashed grey line 
%}

PMLprop.MarkerSize = 12;
PMLprop.LineWidth = 2;
PMLprop.FontSize = 24;
PMLprop.MinPerc = 40;
PMLprop.PercRes1 = 10;
PMLprop.PercRes2 = 5;

PerformanceMetrics_LinePlot(RES,PMLprop)

%% CONFUSION MATRIX PLOT

%{
The following returns 2 plots:
    - the first shows overall confusion matrixes of k-fold cross validation
    process of every sampling window and every model available in the
    workspace variable "RES" automatically loaded for a specified
    "ResultName" 
    - the second shows the confusion matrixes of every model corresponding
    to a choosen sampling window specified in the field "FixedSampWind" of
    the input struct "CMprop".
The function used is "ConfusionMatrix_Plot", the user can find it in the
directory "./functions/results analysis functions" with a function overview
that can be red to better understand the process.
The user can set 3 properties by changing the corresponding fields of the
struct "CMprop":
    - "FontSize", the size of the font used for number, titles and labels
    - "Normalization", the type of normalization used to normalize
    confusion matrixes, 4 options are available:
        - 'absolute', shows the exact number of samples for each
        classification result, plots the same numbers contained in the
        confusion matrixes
        - 'column-normalized', normalizes each column relatively to the sum
        of its elements, containes precision values on diagonal elements
        - 'row-normalized', normalizes each row relatively to the sum of
        its elements, containes sensitivity values on diagonal elements
        - 'absolute', normalizes each element relatively to the sum of all
        elements of the confusion matrix
    - "FixedSampWind", selects the preferred sampling window for the second
    figure, must be one of the available in the workspace struct "RES" or
    will not plot the second figure
%}
CMprop.FontSize = 10;
CMprop.Normalization = 'row-normalized';
CMprop.FixedSampWind = 1.7; %[s]

ConfusionMatrix_Plot(RES,CMprop)







